input ChangePasswordInput {
  oldPassword: String!

  """user new password"""
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

"""Job data"""
type Job {
  """The ID of an object"""
  id: ID!
  _id: String
  user: String
  active: Boolean
  title: String
  role: String
  salary: Float
  benefits: String
  description: String
  workload: String
  localization: String
  addinfo: String
  contract: String
  areas: [String]
  subareas: [String]
}

"""A connection to a list of items."""
type JobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobEdge]
  count: Int
}

"""An edge in a connection."""
type JobEdge {
  """The item at the end of the edge"""
  node: Job

  """A cursor for use in pagination"""
  cursor: String!
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  RegisterJob(input: RegisterJobInput!): RegisterJobPayload
  UpdateJob(input: UpdateJobInput!): UpdateJobPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  job(id: String!): Job
  allJobs(after: String, first: Int, before: String, last: Int, search: String): JobConnection
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  displayname: String!
  description: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input RegisterJobInput {
  user: String!
  active: Boolean!
  title: String!
  role: String!
  salary: Float!
  benefits: String
  description: String!
  workload: String!
  localization: String!
  addinfo: String
  contract: String!
  areas: [String]
  subareas: [String]
  clientMutationId: String
}

type RegisterJobPayload {
  jobinfo: Job
  error: String
  clientMutationId: String
}

input UpdateJobInput {
  id: String
  active: Boolean
  title: String
  role: String
  salary: Float
  benefits: String
  description: String
  workload: String
  localization: String
  addinfo: String
  contract: String
  areas: [String]
  subareas: [String]
  clientMutationId: String
}

type UpdateJobPayload {
  jobinfo: Job
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  active: Boolean
  name: String
  email: String
  displayname: String
  description: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
